package sapin

import (
	"fmt"
	"math/rand"
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func ExampleSapin_1() {
	fmt.Println(NewSapin(1).String())
	// Output:
	//    *
	//   ***
	//  *****
	// *******
	//    |
}

func ExampleSapin_3() {
	fmt.Println(NewSapin(3).String())
	// Output:
	//           *
	//          ***
	//         *****
	//        *******
	//         *****
	//        *******
	//       *********
	//      ***********
	//     *************
	//      ***********
	//     *************
	//    ***************
	//   *****************
	//  *******************
	// *********************
	//          |||
	//          |||
	//          |||
}

func ExampleSapin_fullballs() {
	sapin := NewSapin(3)
	sapin.AddBalls(100)
	fmt.Println(sapin)
	// Output:
	//           @
	//          @@@
	//         @@@@@
	//        @@@@@@@
	//         @@@@@
	//        @@@@@@@
	//       @@@@@@@@@
	//      @@@@@@@@@@@
	//     @@@@@@@@@@@@@
	//      @@@@@@@@@@@
	//     @@@@@@@@@@@@@
	//    @@@@@@@@@@@@@@@
	//   @@@@@@@@@@@@@@@@@
	//  @@@@@@@@@@@@@@@@@@@
	// @@@@@@@@@@@@@@@@@@@@@
	//          |||
	//          |||
	//          |||
}

func ExampleSapin_complex() {
	rand.Seed(42)
	sapin := NewSapin(3)
	sapin.AddBalls(4)
	sapin.AddStar()
	sapin.Emojize()
	fmt.Println(sapin)
	// Output:
	//           ðŸ’›
	//          ðŸŽ„ðŸŽ„ðŸŽ„
	//         ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//        ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//         ðŸŽ„ðŸ”´ðŸŽ„ðŸŽ„ðŸŽ„
	//        ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸ”´ðŸŽ„
	//       ðŸŽ„ðŸŽ„ðŸŽ„ðŸ”´ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//      ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//     ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸ”´ðŸŽ„ðŸŽ„ðŸŽ„
	//      ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//     ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸ”´ðŸŽ„ðŸ”´ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//    ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸ”´
	//   ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//  ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	// ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„ðŸŽ„
	//          ðŸšªðŸšªðŸšª
	//          ðŸšªðŸšªðŸšª
	//          ðŸšªðŸšªðŸšª
}

func ExampleSapin_4balls() {
	rand.Seed(42)
	sapin := NewSapin(3)
	sapin.AddBalls(4)
	fmt.Println(sapin)
	// Output:
	//           *
	//          ***
	//         *****
	//        *******
	//         *@***
	//        *****@*
	//       ***@*****
	//      ***********
	//     *********@***
	//      ***********
	//     ****@*@******
	//    **************@
	//   *****************
	//  *******************
	// *********************
	//          |||
	//          |||
	//          |||
}

func ExampleSapin_10() {
	fmt.Println(NewSapin(10).String())
	// Output:
	//                                                   *
	//                                                  ***
	//                                                 *****
	//                                                *******
	//                                                 *****
	//                                                *******
	//                                               *********
	//                                              ***********
	//                                             *************
	//                                              ***********
	//                                             *************
	//                                            ***************
	//                                           *****************
	//                                          *******************
	//                                         *********************
	//                                           *****************
	//                                          *******************
	//                                         *********************
	//                                        ***********************
	//                                       *************************
	//                                      ***************************
	//                                     *****************************
	//                                       *************************
	//                                      ***************************
	//                                     *****************************
	//                                    *******************************
	//                                   *********************************
	//                                  ***********************************
	//                                 *************************************
	//                                ***************************************
	//                                   *********************************
	//                                  ***********************************
	//                                 *************************************
	//                                ***************************************
	//                               *****************************************
	//                              *******************************************
	//                             *********************************************
	//                            ***********************************************
	//                           *************************************************
	//                              *******************************************
	//                             *********************************************
	//                            ***********************************************
	//                           *************************************************
	//                          ***************************************************
	//                         *****************************************************
	//                        *******************************************************
	//                       *********************************************************
	//                      ***********************************************************
	//                     *************************************************************
	//                         *****************************************************
	//                        *******************************************************
	//                       *********************************************************
	//                      ***********************************************************
	//                     *************************************************************
	//                    ***************************************************************
	//                   *****************************************************************
	//                  *******************************************************************
	//                 *********************************************************************
	//                ***********************************************************************
	//               *************************************************************************
	//                   *****************************************************************
	//                  *******************************************************************
	//                 *********************************************************************
	//                ***********************************************************************
	//               *************************************************************************
	//              ***************************************************************************
	//             *****************************************************************************
	//            *******************************************************************************
	//           *********************************************************************************
	//          ***********************************************************************************
	//         *************************************************************************************
	//        ***************************************************************************************
	//             *****************************************************************************
	//            *******************************************************************************
	//           *********************************************************************************
	//          ***********************************************************************************
	//         *************************************************************************************
	//        ***************************************************************************************
	//       *****************************************************************************************
	//      *******************************************************************************************
	//     *********************************************************************************************
	//    ***********************************************************************************************
	//   *************************************************************************************************
	//  ***************************************************************************************************
	// *****************************************************************************************************
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
	//                                              |||||||||||
}

func TestSapin_String(t *testing.T) {
	Convey("Testing Sapin.String()", t, func() {
		Convey("size=1", func() {
			sapin := NewSapin(1)
			So(fmt.Sprintf("\n%s", sapin.String()), ShouldEqual, `
   *
  ***
 *****
*******
   |
`)
		})
		Convey("size=0", func() {
			sapin := NewSapin(0)
			So(sapin.String(), ShouldBeEmpty)
		})
		Convey("size=-1", func() {
			sapin := NewSapin(-1)
			So(sapin.String(), ShouldBeEmpty)
		})
	})
}
